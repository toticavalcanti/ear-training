// ===================================
// src/services/gamificationService.ts
// L√≥gica completa para calcular scores, XP, n√≠veis e achievements
// ===================================
import UserScore from '../models/UserScore';
import UserProgress from '../models/UserProgress';
import Achievement from '../models/Achievement';
import UserAchievement from '../models/UserAchievement';

export class GamificationService {
  
  // ===================================
  // C√ÅLCULOS DE SCORE E XP
  // ===================================
  
  /**
   * Calcular score baseado em accuracy, tempo e dificuldade
   * @param isCorrect - Se a resposta est√° correta
   * @param timeSpent - Tempo gasto em milissegundos
   * @param difficulty - N√≠vel de dificuldade
   * @param maxTime - Tempo m√°ximo em milissegundos (padr√£o: 30s)
   * @returns Score de 0 a 100
   */
  static calculateScore(
    isCorrect: boolean, 
    timeSpent: number, 
    difficulty: string,
    maxTime: number = 30000
  ): number {
    if (!isCorrect) return 0;
    
    // Score base por dificuldade
    const baseScore = {
      'beginner': 60,
      'intermediate': 70,
      'advanced': 80
    }[difficulty] || 60;
    
    // Bonus de tempo (mais r√°pido = mais pontos)
    const timeBonus = Math.max(0, (maxTime - timeSpent) / maxTime * 40);
    
    return Math.min(100, Math.round(baseScore + timeBonus));
  }
  
  /**
   * Calcular XP baseado no score, dificuldade e tipo de exerc√≠cio
   * @param score - Score obtido (0-100)
   * @param difficulty - N√≠vel de dificuldade
   * @param exerciseType - Tipo do exerc√≠cio
   * @param isPerfect - Se foi score perfeito
   * @returns Quantidade de XP ganho
   */
  static calculateExperience(
    score: number, 
    difficulty: string, 
    exerciseType: string,
    isPerfect: boolean = false
  ): number {
    const baseXP = {
      'beginner': 10,
      'intermediate': 20,
      'advanced': 30
    }[difficulty] || 10;
    
    const typeMultiplier = {
      'interval': 1.0,
      'rhythmic': 1.1,
      'melodic': 1.2,
      'progression': 1.3
    }[exerciseType] || 1.0;
    
    let xp = Math.round(baseXP * (score / 100) * typeMultiplier);
    
    // Bonus por score perfeito
    if (isPerfect) xp = Math.round(xp * 1.5);
    
    return Math.max(0, xp);
  }
  
  /**
   * Calcular n√≠vel baseado na experi√™ncia total
   * @param experience - XP total do usu√°rio
   * @returns N√≠vel atual
   */
  static calculateLevel(experience: number): number {
    // F√≥rmula: n√≠vel = floor(sqrt(XP / 100)) + 1
    return Math.floor(Math.sqrt(experience / 100)) + 1;
  }
  
  /**
   * Calcular XP necess√°rio para o pr√≥ximo n√≠vel
   * @param currentLevel - N√≠vel atual
   * @returns XP necess√°rio para subir de n√≠vel
   */
  static calculateXPForNextLevel(currentLevel: number): number {
    return Math.pow(currentLevel, 2) * 100;
  }
  
  // ===================================
  // FUN√á√ÉO PRINCIPAL DE SUBMISS√ÉO
  // ===================================
  
  /**
   * Submeter exerc√≠cio e atualizar todo o progresso do usu√°rio
   * @param userId - ID do usu√°rio
   * @param exerciseId - ID do exerc√≠cio
   * @param exerciseType - Tipo do exerc√≠cio
   * @param difficulty - Dificuldade
   * @param userAnswer - Resposta do usu√°rio
   * @param correctAnswer - Resposta correta
   * @param timeSpent - Tempo gasto em milissegundos
   * @param attempts - N√∫mero de tentativas
   * @returns Resultado da submiss√£o
   */
  static async submitExercise(
    userId: string,
    exerciseId: string,
    exerciseType: string,
    difficulty: string,
    userAnswer: any,
    correctAnswer: any,
    timeSpent: number,
    attempts: number = 1
  ) {
    console.log(`üéÆ GAMIFICATION: Submetendo exerc√≠cio para ${userId}`);
    console.log(`üìù Tipo: ${exerciseType}, Dificuldade: ${difficulty}, Tempo: ${timeSpent}ms`);
    
    // Verificar se a resposta est√° correta
    const isCorrect = this.checkAnswer(userAnswer, correctAnswer, exerciseType);
    const accuracy = isCorrect ? 100 : 0;
    const score = this.calculateScore(isCorrect, timeSpent, difficulty);
    const isPerfect = score === 100;
    const experienceGained = this.calculateExperience(score, difficulty, exerciseType, isPerfect);
    
    console.log(`üìä Resultado: ${isCorrect ? 'CORRETO' : 'INCORRETO'}, Score: ${score}/100, XP: ${experienceGained}`);
    
    // Salvar score no banco
    const userScore = new UserScore({
      userId,
      exerciseId,
      exerciseType,
      difficulty,
      score,
      accuracy,
      timeSpent,
      attempts,
      perfectScore: isPerfect,
      experienceGained
    });
    
    await userScore.save();
    console.log(`üíæ Score salvo no banco de dados`);
    
    // Atualizar progresso do usu√°rio
    const updatedProgress = await this.updateUserProgress(
      userId, 
      exerciseType, 
      difficulty, 
      score, 
      timeSpent, 
      isPerfect, 
      experienceGained
    );
    
    // Verificar achievements desbloqueados
    const newAchievements = await this.checkAchievements(userId);
    
    console.log(`üèÜ ${newAchievements.length} novos achievements desbloqueados`);
    
    return {
      score,
      accuracy,
      experienceGained,
      isPerfect,
      newAchievements,
      levelUp: updatedProgress.levelUp,
      currentLevel: updatedProgress.currentLevel,
      totalExperience: updatedProgress.totalExperience
    };
  }
  
  // ===================================
  // VERIFICA√á√ÉO DE RESPOSTAS
  // ===================================
  
  /**
   * Verificar se a resposta do usu√°rio est√° correta
   * @param userAnswer - Resposta do usu√°rio
   * @param correctAnswer - Resposta correta
   * @param exerciseType - Tipo do exerc√≠cio
   * @returns true se correto, false se incorreto
   */
  private static checkAnswer(userAnswer: any, correctAnswer: any, exerciseType: string): boolean {
    try {
      switch (exerciseType) {
        case 'interval':
          // Para intervalos, comparar strings (ex: "P5", "M3")
          return String(userAnswer).toLowerCase().trim() === String(correctAnswer).toLowerCase().trim();
          
        case 'rhythmic':
          // Para ritmos, comparar strings ou arrays
          if (Array.isArray(userAnswer) && Array.isArray(correctAnswer)) {
            return JSON.stringify(userAnswer.sort()) === JSON.stringify(correctAnswer.sort());
          }
          return String(userAnswer).toLowerCase().trim() === String(correctAnswer).toLowerCase().trim();
          
        case 'melodic':
          // Para melodias, comparar arrays de notas
          if (Array.isArray(userAnswer) && Array.isArray(correctAnswer)) {
            return JSON.stringify(userAnswer) === JSON.stringify(correctAnswer);
          }
          return String(userAnswer) === String(correctAnswer);
          
        case 'progression':
          // Para progress√µes, comparar arrays de acordes
          if (Array.isArray(userAnswer) && Array.isArray(correctAnswer)) {
            return JSON.stringify(userAnswer) === JSON.stringify(correctAnswer);
          }
          return String(userAnswer) === String(correctAnswer);
          
        default:
          console.warn(`‚ö†Ô∏è Tipo de exerc√≠cio desconhecido: ${exerciseType}`);
          return false;
      }
    } catch (error) {
      console.error(`‚ùå Erro ao verificar resposta:`, error);
      return false;
    }
  }
  
  // ===================================
  // ATUALIZA√á√ÉO DE PROGRESSO
  // ===================================
  
  /**
   * Atualizar o progresso completo do usu√°rio
   * @param userId - ID do usu√°rio
   * @param exerciseType - Tipo do exerc√≠cio
   * @param difficulty - Dificuldade
   * @param score - Score obtido
   * @param timeSpent - Tempo gasto
   * @param isPerfect - Se foi score perfeito
   * @param experienceGained - XP ganho
   * @returns Informa√ß√µes sobre o progresso atualizado
   */
  private static async updateUserProgress(
    userId: string,
    exerciseType: string,
    difficulty: string,
    score: number,
    timeSpent: number,
    isPerfect: boolean,
    experienceGained: number
  ) {
    let userProgress = await UserProgress.findOne({ userId });
    
    // Criar progresso inicial se n√£o existir
    if (!userProgress) {
      userProgress = new UserProgress({ userId });
      console.log(`üë§ Criando progresso inicial para usu√°rio ${userId}`);
    }
    
    const oldLevel = userProgress.level;
    const oldExperience = userProgress.experience;
    
    // Atualizar estat√≠sticas gerais
    userProgress.totalExercises += 1;
    if (isPerfect) userProgress.perfectScores += 1;
    
    // Recalcular m√©dia geral
    const totalExercises = userProgress.totalExercises;
    userProgress.averageScore = (userProgress.averageScore * (totalExercises - 1) + score) / totalExercises;
    
    // Atualizar progresso por tipo de exerc√≠cio
    const typeKey = exerciseType as keyof typeof userProgress;
    if (userProgress[typeKey] && typeof userProgress[typeKey] === 'object') {
      const typeStats = userProgress[typeKey] as any;
      typeStats.completed += 1;
      typeStats.averageScore = (typeStats.averageScore * (typeStats.completed - 1) + score) / typeStats.completed;
      
      // Atualizar melhor tempo (apenas se for melhor)
      if (typeStats.bestTime === 0 || timeSpent < typeStats.bestTime) {
        typeStats.bestTime = timeSpent;
      }
    }
    
    // Atualizar progresso por dificuldade
    const difficultyKey = difficulty as keyof typeof userProgress;
    if (userProgress[difficultyKey] && typeof userProgress[difficultyKey] === 'object') {
      const difficultyStats = userProgress[difficultyKey] as any;
      difficultyStats.completed += 1;
      difficultyStats.averageScore = (difficultyStats.averageScore * (difficultyStats.completed - 1) + score) / difficultyStats.completed;
    }
    
    // Atualizar XP e n√≠vel
    userProgress.experience += experienceGained;
    userProgress.level = this.calculateLevel(userProgress.experience);
    
    // Verificar se subiu de n√≠vel
    const levelUp = userProgress.level > oldLevel;
    if (levelUp) {
      console.log(`üéâ LEVEL UP! ${oldLevel} ‚Üí ${userProgress.level} (${oldExperience} ‚Üí ${userProgress.experience} XP)`);
    }
    
    // Atualizar streak de dias consecutivos
    await this.updateStreak(userProgress);
    
    // Salvar progresso atualizado
    await userProgress.save();
    console.log(`üìà Progresso atualizado: N√≠vel ${userProgress.level}, XP ${userProgress.experience}, M√©dia ${userProgress.averageScore.toFixed(1)}%`);
    
    return {
      levelUp,
      currentLevel: userProgress.level,
      totalExperience: userProgress.experience,
      averageScore: userProgress.averageScore
    };
  }
  
  /**
   * Atualizar streak de dias consecutivos
   * @param userProgress - Objeto de progresso do usu√°rio
   */
  private static async updateStreak(userProgress: any) {
    const today = new Date();
    today.setHours(0, 0, 0, 0); // Resetar horas para compara√ß√£o apenas de data
    
    const lastActivity = new Date(userProgress.lastActivityDate);
    lastActivity.setHours(0, 0, 0, 0);
    
    const daysDifference = Math.floor((today.getTime() - lastActivity.getTime()) / (1000 * 60 * 60 * 24));
    
    if (daysDifference === 0) {
      // Mesmo dia, manter streak
      console.log(`üî• Streak mantido: ${userProgress.streakDays} dias`);
    } else if (daysDifference === 1) {
      // Dia consecutivo, incrementar streak
      userProgress.streakDays += 1;
      console.log(`üî• Streak incrementado: ${userProgress.streakDays} dias`);
    } else {
      // Quebrou o streak
      const oldStreak = userProgress.streakDays;
      userProgress.streakDays = 1;
      console.log(`üíî Streak quebrado: ${oldStreak} ‚Üí 1 dia`);
    }
    
    userProgress.lastActivityDate = new Date();
  }
  
  // ===================================
  // SISTEMA DE ACHIEVEMENTS
  // ===================================
  
  /**
   * Verificar e desbloquear achievements para o usu√°rio
   * @param userId - ID do usu√°rio
   * @returns Array de novos achievements desbloqueados
   */
  private static async checkAchievements(userId: string): Promise<any[]> {
    try {
      const userProgress = await UserProgress.findOne({ userId });
      if (!userProgress) {
        console.log(`‚ö†Ô∏è Progresso n√£o encontrado para usu√°rio ${userId}`);
        return [];
      }
      
      // Buscar todos os achievements ativos
      const achievements = await Achievement.find({ isActive: true });
      
      // Buscar achievements j√° desbloqueados pelo usu√°rio
      const userAchievements = await UserAchievement.find({ userId }).select('achievementId');
      const unlockedIds = userAchievements.map(ua => ua.achievementId);
      
      const newAchievements: any[] = [];
      
      // Verificar cada achievement
      for (const achievement of achievements) {
        // Pular se j√° desbloqueado
        if (unlockedIds.includes(achievement.id)) continue;
        
        // Verificar se a condi√ß√£o foi atendida
        if (this.checkAchievementCondition(achievement, userProgress)) {
          try {
            // Desbloquear achievement
            await new UserAchievement({
              userId,
              achievementId: achievement.id
            }).save();
            
            newAchievements.push(achievement);
            console.log(`üèÜ Achievement desbloqueado: ${achievement.name} (${achievement.points} XP)`);
          } catch (error) {
            console.error(`‚ùå Erro ao salvar achievement ${achievement.id}:`, error);
          }
        }
      }
      
      return newAchievements;
    } catch (error) {
      console.error(`‚ùå Erro ao verificar achievements:`, error);
      return [];
    }
  }
  
  /**
   * Verificar se uma condi√ß√£o espec√≠fica de achievement foi atendida
   * @param achievement - O achievement a ser verificado
   * @param userProgress - Progresso do usu√°rio
   * @returns true se a condi√ß√£o foi atendida
   */
  private static checkAchievementCondition(achievement: any, userProgress: any): boolean {
    const condition = achievement.condition;
    const threshold = achievement.threshold;
    
    try {
      switch (condition) {
        case 'total_exercises':
          return userProgress.totalExercises >= threshold;
          
        case 'perfect_scores':
          return userProgress.perfectScores >= threshold;
          
        case 'reach_level':
          return userProgress.level >= threshold;
          
        case 'intervals_completed':
          return userProgress.intervals.completed >= threshold;
          
        case 'rhythmic_completed':
          return userProgress.rhythmic.completed >= threshold;
          
        case 'melodic_completed':
          return userProgress.melodic.completed >= threshold;
          
        case 'progression_completed':
          return userProgress.progression.completed >= threshold;
          
        case 'streak_days':
          return userProgress.streakDays >= threshold;
          
        case 'average_score':
          return userProgress.averageScore >= threshold;
          
        case 'experience_points':
          return userProgress.experience >= threshold;
          
        // Condi√ß√µes especiais que requerem verifica√ß√£o de UserScore
        case 'fast_completion':
          return this.checkFastCompletion(userProgress.userId, threshold);
          
        case 'early_completion':
        case 'late_completion':
          return this.checkTimeBasedCompletion(userProgress.userId, condition);
          
        default:
          console.warn(`‚ö†Ô∏è Condi√ß√£o de achievement desconhecida: ${condition}`);
          return false;
      }
    } catch (error) {
      console.error(`‚ùå Erro ao verificar condi√ß√£o ${condition}:`, error);
      return false;
    }
  }
  
  /**
   * Verificar se o usu√°rio completou algum exerc√≠cio rapidamente
   * @param userId - ID do usu√°rio
   * @param thresholdMs - Tempo limite em milissegundos
   * @returns true se completou exerc√≠cio no tempo limite
   */
  private static async checkFastCompletion(userId: string, thresholdMs: number): Promise<boolean> {
    try {
      const fastCompletion = await UserScore.findOne({
        userId,
        timeSpent: { $lt: thresholdMs },
        perfectScore: true // Apenas scores perfeitos contam para velocidade
      });
      return !!fastCompletion;
    } catch (error) {
      console.error(`‚ùå Erro ao verificar fast completion:`, error);
      return false;
    }
  }
  
  /**
   * Verificar achievements baseados em hor√°rio
   * @param userId - ID do usu√°rio
   * @param condition - 'early_completion' ou 'late_completion'
   * @returns true se a condi√ß√£o foi atendida
   */
  private static async checkTimeBasedCompletion(userId: string, condition: string): Promise<boolean> {
    try {
      const query: any = { userId };
      
      if (condition === 'early_completion') {
        // Antes das 6h da manh√£
        query.completedAt = {
          $gte: new Date(new Date().setHours(0, 0, 0, 0)),
          $lt: new Date(new Date().setHours(6, 0, 0, 0))
        };
      } else if (condition === 'late_completion') {
        // Depois das 23h
        query.completedAt = {
          $gte: new Date(new Date().setHours(23, 0, 0, 0)),
          $lt: new Date(new Date().setHours(23, 59, 59, 999))
        };
      }
      
      const timeBasedCompletion = await UserScore.findOne(query);
      return !!timeBasedCompletion;
    } catch (error) {
      console.error(`‚ùå Erro ao verificar time-based completion:`, error);
      return false;
    }
  }
  
  // ===================================
  // M√âTODOS P√öBLICOS DE CONSULTA
  // ===================================
  
  /**
   * Obter ranking/leaderboard de usu√°rios
   * @param limit - N√∫mero m√°ximo de usu√°rios
   * @param period - Per√≠odo do ranking
   * @returns Lista de usu√°rios ranqueados
   */
  static async getLeaderboard(limit: number = 10, period: 'week' | 'month' | 'all' = 'all') {
    try {
      const query: any = {};
      
      if (period !== 'all') {
        const now = new Date();
        const startDate = new Date();
        
        if (period === 'week') {
          startDate.setDate(now.getDate() - 7);
        } else if (period === 'month') {
          startDate.setMonth(now.getMonth() - 1);
        }
        
        query.updatedAt = { $gte: startDate };
      }
      
      const leaderboard = await UserProgress.find(query)
        .sort({ experience: -1, level: -1, averageScore: -1 })
        .limit(limit)
        .select('userId level experience averageScore totalExercises perfectScores streakDays');
      
      console.log(`üèÖ Leaderboard gerado: ${leaderboard.length} usu√°rios (per√≠odo: ${period})`);
      return leaderboard;
    } catch (error) {
      console.error(`‚ùå Erro ao gerar leaderboard:`, error);
      return [];
    }
  }
  
  /**
   * Obter progresso detalhado do usu√°rio
   * @param userId - ID do usu√°rio
   * @returns Progresso do usu√°rio ou null
   */
  static async getUserProgress(userId: string) {
    try {
      let progress = await UserProgress.findOne({ userId });
      
      if (!progress) {
        // Criar progresso inicial se n√£o existir
        progress = new UserProgress({ userId });
        await progress.save();
        console.log(`üë§ Progresso inicial criado para usu√°rio ${userId}`);
      }
      
      return progress;
    } catch (error) {
      console.error(`‚ùå Erro ao buscar progresso do usu√°rio ${userId}:`, error);
      return null;
    }
  }
  
  /**
   * Obter achievements do usu√°rio
   * @param userId - ID do usu√°rio
   * @returns Achievements desbloqueados e bloqueados
   */
  static async getUserAchievements(userId: string) {
    try {
      // Buscar achievements desbloqueados pelo usu√°rio
      const userAchievements = await UserAchievement.find({ userId })
        .populate('achievementId')
        .sort({ unlockedAt: -1 });
      
      // Buscar todos os achievements dispon√≠veis
      const allAchievements = await Achievement.find({ isActive: true });
      
      // Filtrar achievements ainda bloqueados
      const unlockedIds = userAchievements.map(ua => ua.achievementId);
      const locked = allAchievements.filter(achievement => 
        !unlockedIds.includes(achievement.id)
      );
      
      console.log(`üèÜ Achievements do usu√°rio ${userId}: ${userAchievements.length}/${allAchievements.length}`);
      
      return {
        unlocked: userAchievements,
        locked: locked,
        total: allAchievements.length,
        unlockedCount: userAchievements.length
      };
    } catch (error) {
      console.error(`‚ùå Erro ao buscar achievements do usu√°rio ${userId}:`, error);
      return {
        unlocked: [],
        locked: [],
        total: 0,
        unlockedCount: 0
      };
    }
  }
  
  /**
   * Obter estat√≠sticas gerais da plataforma
   * @returns Estat√≠sticas gerais
   */
  static async getPlatformStats() {
    try {
      const [
        totalUsers,
        totalExercises,
        averageScoreResult,
        topPerformer
      ] = await Promise.all([
        UserProgress.countDocuments(),
        UserScore.countDocuments(),
        UserScore.aggregate([
          { $group: { _id: null, avgScore: { $avg: '$score' } } }
        ]),
        UserProgress.findOne().sort({ experience: -1 }).select('userId level experience')
      ]);
      
      const platformStats = {
        totalUsers,
        totalExercises,
        averageScore: averageScoreResult[0]?.avgScore || 0,
        topPerformer: topPerformer || null
      };
      
      console.log(`üìä Estat√≠sticas da plataforma:`, platformStats);
      return platformStats;
    } catch (error) {
      console.error(`‚ùå Erro ao buscar estat√≠sticas da plataforma:`, error);
      return {
        totalUsers: 0,
        totalExercises: 0,
        averageScore: 0,
        topPerformer: null
      };
    }
  }
}
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HuggingFaceProvider = void 0;
// src/services/llm/providers/huggingfaceProvider.ts
const axios_1 = __importDefault(require("axios"));
class HuggingFaceProvider {
    constructor() {
        this.apiKey = process.env.HUGGINGFACE_API_KEY || '';
        this.baseUrl = 'https://api-inference.huggingface.co/models';
    }
    async generateResponse(systemPrompt, userPrompt, options = {}) {
        var _a;
        try {
            const model = 'google/flan-t5-base';
            const prompt = `Generate MIDI exercise: ${userPrompt}`;
            const response = await axios_1.default.post(`${this.baseUrl}/${model}`, {
                inputs: prompt,
                parameters: {
                    temperature: options.temperature || 0.7,
                    max_new_tokens: options.maxTokens || 500
                }
            }, {
                headers: {
                    'Authorization': `Bearer ${this.apiKey}`,
                    'Content-Type': 'application/json'
                },
                timeout: 30000
            });
            let generatedText = '';
            // Hugging Face retorna array ou objeto dependendo do modelo
            if (Array.isArray(response.data)) {
                generatedText = ((_a = response.data[0]) === null || _a === void 0 ? void 0 : _a.generated_text) || '';
            }
            else {
                // Type assertion para objeto único
                const singleResponse = response.data;
                generatedText = singleResponse.generated_text || '';
            }
            // Se a resposta é muito simples, criar JSON básico
            if (generatedText.length < 50 || !generatedText.includes('{')) {
                return this.createBasicMIDI(userPrompt);
            }
            return generatedText;
        }
        catch (error) {
            console.error('Erro no Hugging Face:', error);
            return this.createBasicMIDI(userPrompt);
        }
    }
    createBasicMIDI(userPrompt) {
        const basicMIDI = {
            events: [
                { type: "note", channel: 1, position: 0, data1: 60, data2: 80, duration: 480 },
                { type: "note", channel: 1, position: 960, data1: 67, data2: 80, duration: 480 }
            ],
            ppq: 480,
            tempo: 90,
            timeSignature: { numerator: 4, denominator: 4 },
            description: `Exercise generated by Hugging Face`,
            correctAnswer: 'Perfect Fifth'
        };
        return JSON.stringify(basicMIDI, null, 2);
    }
}
exports.HuggingFaceProvider = HuggingFaceProvider;
